#+TITLE: jQueryおじさんによるjQueryおじさんのためのReact入門

* Reactの特徴

** Declarative

- 宣言的<--->手続き的


** Component-based

- コンポーネント<--->神スクリプト

- Atomic Design

以前はほとんど実現できていなかった「再利用性」「テスタビリティ」をもたらします。


** Learn Once, Write Anywhere

一度覚えれば、どこでも（何にでも）書ける。

- Web App
- React Native
  - React Native for Web
- React VR

* jQueryとなにがちがうんじゃい

** DOMを触らなくなりました

構築されたDOMをゴニョゴニョすることがない。

- props(初期値)とstate(状態)からDOMを構築する。
- 状態が変更されたら1からDOMを作り直し。
- 仮想DOMで差分のみ更新するので性能よし。


*** 例：要素の追加

- stateにあるオブジェクト、配列に要素を追加して、stateの変更を通知する。
- 最新のstateでDOMが再構築される（実際の更新は差分のみ）


** (直接関係ないけど)開発環境がモダンになりました

ビルドが当たり前に。

トランスパイル+Polyfill
  - JavaScript(またはAltJS)からJavaScriptに変換
  - ブラウザが実装していない機能を補う

最新の言語仕様や機能を積極的に使えるようになりました。  

- ES2015
- JSX

ブラウザの差異を気にしなくてよい部分が増えました。

※Reactにもビルドしないやり方もあるがあくまでお試し

* Reactの始め方

- node.js
- yarn(optional)
- React Developer Tools (optional)
- VSCode

** Visual Studio Code

https://code.visualstudio.com/docs/nodejs/reactjs-tutorial

これで、

- create-react-app
- コード補完
- Debugger
- ESLint

まで揃います。

* Redux

** 未解決の課題

*** コンポーネントの再利用性

コンポーネント内に、ビュー(render)、状態(state)、処理(イベントハンドラ)が混在していて再利用が難しい。
「ボタンを押したら特定のURLにアクセスする」というような部品は再利用できない。


*** バケツリレー

コンポーネントの分割を進めてツリー構造を作ると、データの受け渡しが増える。
あるコンポーネントでイベントが発生したとき、別のコンポーネントを更新したい場合、
イベント発生を親コンポーネントに通知して、別コンポーネントに伝播させる必要がある。

** Fluxとは？

#+BEGIN_QUOTE
Flux is the application architecture that Facebook uses for building client-side web applications. 
#+END_QUOTE

アーキテクチャであって実装ではない。

*** よく見る絵
[[http://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png]]

[[https://github.com/facebook/flux/raw/master/docs/img/flux-diagram-white-background.png]]

絵を眺めていてもよくわからない。コードを追ったり写経しているうちにしっくりくる。

** Redux

[[https://cdn-images-1.medium.com/max/1600/1*87dJ5EB3ydD7_AbhKb4UOQ.png]]



簡単に言うと、

*** これまでのやりかた

- ビューで何かイベントが起こったとき（例えば商品購入ボタンをクリック）、直接ビューを更新する（買い物かごを更新）。


*** Reduxでのやりかた

- 発生したイベントを表すオブジェクト(Action≒命令書)を作る
- Reducerは、Actionと今のstateから、新しいstateを作る
- Containerは、コンポーネントに必要な情報をstateから抽出してpropsとして渡す
- Containerは、コンポーネントに必要なイベントハンドラをpropsとして渡す
- コンポーネントは受け取ったpropsからビューを作成


- ユーザは商品購入ボタンをクリックする
- コンポーネントは登録されたコールバック関数を呼び出す

#+BEGIN_EXAMPLE html
<button onClick={ev => props.addToCart(item, quantity)} >購入</button>
#+END_EXAMPLE

- コールバック関数で、Actionが生成され、Storeにdispatchされる

#+BEGIN_EXAMPLE js
const action = {
  action : 'ADD_TO_CART',
  payload : {
    item: item,
    quantity: quantity
  }
}
#+END_EXAMPLE

- Reducerは受け取ったActionと今のstateから新しいstateを作る

#+BEGIN_EXAMPLE js
const reducer = (state, action) => {
 switch (action.type) {
   case 'ADD_TO_CART':
     // 新しい
     const newState = {
       cart: state.cart.concat({
          item: action.payload.item,
          quantity: action.payload.quantity
        })
     }
     return newState;
   default:
     return state;
 }
}
return newState

#+END_EXAMPLE

** Redux3原則

 Single source of truth
 State is read-only
 Changes are made with pure functions

** 登場人物

*** Action

*** Action Creator

*** Reducer

*** Store

*** Container Component

*** Presentational Component

*** Middleware

DBやAPサーバのことではない。多分由来はRack？
http://gihyo.jp/dev/serial/01/ruby/0025

* その他の話題

** Redux DevTools

https://github.com/reduxjs/redux-devtools

** 非同期処理(ajax)

** バリデーション

** テスト

* 実戦投入に向けて



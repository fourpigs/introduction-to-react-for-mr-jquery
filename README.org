#+TITLE: jQueryおじさんによるjQueryおじさんのためのReact入門

* Reactとは

Viewのライブラリです。

* Reactの特徴

** Declarative

- 宣言的<--->手続き的


** Component-based

- コンポーネント<--->神スクリプト

- Atomic Design

以前はほとんど実現できていなかった「再利用性」「テスタビリティ」をもたらします。


** Learn Once, Write Anywhere

一度覚えれば、どこでも（何にでも）書ける。

- Web App
- React Native
  - React Native for Web
- React VR


* jQueryとなにがちがうんじゃい

** DOMを触らなくなりました

構築されたDOMをゴニョゴニョすることがない。

- props(初期値)とstate(状態)からDOMを構築する。
  - DOMから値は取得しない(stateから値取得する)
  - DOMに値を設定しない(stateを更新する)
- 状態が変更されたら1からDOMを作り直し
- 実際は *仮想DOM* で差分のみ更新するので性能よし


オブジェクトを元にDOMを構築する（JSPのノリ）。
構築されたDOMを直接操作しない。

- イベントが発生
- stateを変更する
- setStateを呼ぶ。
- 新しいstateでrenderが呼ばれる（実際は差分だけが書き換えられる）

シンプルで間違えにくく性能も良い。

*** 例：要素の追加

- stateにあるオブジェクト、配列に要素を追加して、stateの変更を通知する。
- 最新のstateでDOMが再構築される（実際の更新は差分のみ）

** コンポーネント指向

部品化がしやすい。
「単純なコンポーネント」と「それを合成したコンポーネント」
みたいなのがやりやすい

Atomic Designと親和性が高い


** 開発環境がモダンになりました

ビルドが当たり前に。
※Reactにもビルドしないやり方もあるがあくまでお試し＆非推奨

トランスパイル+Polyfill
  - JavaScript(またはAltJS)からJavaScriptに変換
  - ブラウザが実装していない機能を補う

最新の言語仕様やAPIを積極的に使えるようになりました。  

- [[./es6-in-10min.org][ES2015]]
- [[./jsx-not-so-weird.org][JSX]]

現在の所謂モダンブラウザでは、ES2015の機能はほぼ全て使用できるのですが、
ブラウザ間の細かい差異を気にしなくてよくなります。

http://kangax.github.io/compat-table/es6/


jQueryの役割の半分くらいは、ブラウザの再吸収にあった気がしますが、
これもトランスパイラーが面倒見てくれることになりました。


*** create-react-app

以前は最初のビルド環境構築で苦労があり、なかなかReact入門できなかったのですが、
[[https://github.com/facebook/create-react-app][create-react-app]] コマンドのおかげで、とりあえずビルド周りの知識なしで始められるようになりました。

1コマンド実行で、以下のようなことができます。

- babelによるトランスパイル
- webpackによるバンドル
- webpack-dev-serverによる実行・自動リロード
- jestによるユニットテスト

* Reactの始め方

** 体験コース

- [[https://reactjs.org/redirect-to-codepen/hello-world][CodePen]](React)

** 本格コース

- node.js
- yarn(optional)
- React Developer Tools (optional)
- VSCode

*** Visual Studio Code

https://code.visualstudio.com/docs/nodejs/reactjs-tutorial

これで、

- create-react-app
- コード補完
- Debugger
- ESLint

まで揃います。

（時間があったらcreate-react-appしてみる）

* Reactのコードを見てみる。

** ソートの例

構築されたDOMを触らずにソートをします。

** コンポーネントの例

- 単純なカウンター
- コンポーネント化したカウンター
- Redux化したカウンター

* Redux

** 未解決の課題

*** コンポーネントの再利用性

コンポーネント内に、ビュー(render)、状態(state)、処理(イベントハンドラ)が混在していて再利用が難しい。
「ボタンを押したら特定のURLにアクセスする」というような部品は再利用できない。


*** バケツリレー

コンポーネントの分割を進めてツリー構造を作ると、データの受け渡しが増える。
あるコンポーネントでイベントが発生したとき、別のコンポーネントを更新したい場合、
イベント発生を親コンポーネントに通知して、別コンポーネントに伝播させる必要がある。

** Fluxとは？

#+BEGIN_QUOTE
Flux is the application architecture that Facebook uses for building client-side web applications. 
#+END_QUOTE

- クライアントサイドアプリケーションのアーキテクチャ。
  - MVCやMVVMとかと同列
- データの流れが単一方向になる
- Fluxは考え方なので、特定のフレームワークに依存しない。ネイティブアプリにも応用される。



アーキテクチャであって実装ではない。

*** よく見る絵

[[http://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png]]

[[https://github.com/facebook/flux/raw/master/docs/img/flux-diagram-white-background.png]]

絵を眺めていてもよくわからない。コードを追ったり写経しているうちにしっくりくる。

** Redux


- ReduxはFluxの実装
- だが、独自の思想も持っている。


[[https://cdn-images-1.medium.com/max/1600/1*87dJ5EB3ydD7_AbhKb4UOQ.png]]


*** これまでのやりかた

- ビューで何かイベントが起こったとき（例えば商品購入ボタンをクリック）、直接ビューを更新する（買い物かごを更新）。


*** Reduxでのやりかた

- ActionCreatorは、発生したイベントを元に、実行すべき処理を表すオブジェクト(Action)を作る
- Reducerは、Actionと今のstateから、新しいstateを作る
- Containerは、コンポーネントに必要な情報をstateから抽出してpropsとして渡す
- Containerは、コンポーネントに必要なイベントハンドラをpropsとして渡す
- コンポーネントは受け取ったpropsからビューを作成

*** 例：ショッピングサイトで商品を購入する

- ユーザは商品購入ボタンをクリックする
- コンポーネントは登録されたコールバック関数を呼び出す

#+BEGIN_EXAMPLE html
<button onClick={ev => props.addToCart(item, quantity)} >購入</button>
#+END_EXAMPLE

- コールバック関数で、Actionが生成され、Storeにdispatchされる

#+BEGIN_EXAMPLE js
const action = {
  action : 'ADD_TO_CART',
  payload : {
    item: item,
    quantity: quantity
  }
}
#+END_EXAMPLE

- Reducerは受け取ったActionと今のstateから新しいstateを作る

#+BEGIN_EXAMPLE js
const reducer = (state, action) => {
 switch (action.type) {
   case 'ADD_TO_CART':
     // 新しい
     const newState = {
       cart: state.cart.concat({
          item: action.payload.item,
          quantity: action.payload.quantity
        })
     }
     return newState;
   default:
     return state;
 }
}
return newState

#+END_EXAMPLE

** Redux3原則

*** Single source of truth

- アプリケーションの状態は単一のstateで管理する
  - stateは複数存在しない
- 「実はこのテストをする時は、こっちのstateがAでこっちのstateはXじゃないと駄目なんです」みたいなことがなくなる。
- stateをlocalStorageに保存するだけで、とりあえずクライアントサイドの情報は復元できる

*** State is read-only

- Stateを直接更新しない
  - ActionをdispatchしてReducerで新しいStateを作る
- データの流れが一方向になる


*** Changes are made with pure functions

変更は副作用のない関数で行います。

Reduxを適用すると、各処理が関数的(functional)になります。
これは、バグが埋め込まれにくく、テストがしやすいことを意味します。

以下のように、コードの大半が副作用のない関数になります。

| 名称                          | 引数                        | 戻り値                                      |
|-------------------------------+-----------------------------+---------------------------------------------|
| ActionCreator                 | 任意(例:更新対象データのID) | Action                                      |
| Reducer                       | Actionとstate               | 新しいstate                                 |
| Container(mapStateToProps)    | stateと前のprops            | stateのうち対象コンポーネントに必要なデータ |
| Container(mapDispatchToProps) | dispatch関数とprops         | イベント発生時のコールバック関数            |
| Component                     | props                       | HTML(Reactのelement)                        |


これらは、ブラウザ無しで簡単にテストできます。

** 登場人物

- Action
- Action Creator
- Reducer
- Store
- Container Component
- Presentational Component
- Middleware


* その他の話題

** Redux DevTools

https://github.com/reduxjs/redux-devtools

** 非同期処理(ajax)

- redux-thunk
- redux-saga
- redux-observable

どれも簡単ではないですが、下2つは特に難しいです。
(generatorやReactive Programmingの知識が必要です)

** バリデーション

業務アプリケーションでよくある入力フォームとそのバリデーションですが、
特にこれと言ったデファクトは無いようです。。。

** テスト

スナップショット比較

* 実戦投入に向けて

** 学習コスト

PJ初期は生産性がでない模様。

** 開発環境構築

create-react-appは簡易的なものであり、実際は環境見れる人がいないと厳しい。


** 将来性

※個人の感想です

Reactの考え方自体は不可逆なところに来た感があります。
(単方向バインディング、仮想DOM、コンポーネント志向...)

また、React本体はある程度安定感があると思います。
（過去、Reactのライセンスが話題になりましたが、MITライセンスになりました）


React単体では単なるViewのライブラリで、アプリケーション構築には様々なライブラリが必要となります。
React周辺ライブラリの継続性や破壊的変更には不安が残ります。

** 

技術面でのリスクがある以上は、それ以外のところでカバーが必要。

- アプリケーションのスペックを含めてコントールできる
- 技術面以外での「初モノ」を極力なくす
  - 初めての顧客
  - 初めてのメンバー
  - リーダー経験なしのリーダー
  - アーキテクト経験なしのアーキテクト

